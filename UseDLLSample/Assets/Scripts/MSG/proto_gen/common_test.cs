//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Option: missing-value detection (*Specified/ShouldSerialize*/Reset*) enabled
    
// Generated from: common_test.proto
namespace Common
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"StructTest")]
  public partial class StructTest : global::ProtoBuf.IExtensible
  {
    public StructTest() {}
    

    private Common.EnumTest? _type;
    [global::ProtoBuf.ProtoMember(1, IsRequired = false, Name=@"type", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public Common.EnumTest type
    {
      get { return _type?? Common.EnumTest.ENUM_TEST_INVALID; }
      set { _type = value; }
    }
    //Here has been deleted XmlIgnore
    [global::System.ComponentModel.Browsable(false)]
    public bool typeSpecified
    {
      get { return _type != null; }
      set { if (value == (_type== null)) _type = value ? type : (Common.EnumTest?)null; }
    }
    private bool ShouldSerializetype() { return typeSpecified; }
    private void Resettype() { typeSpecified = false; }
    

    private float? _val;
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"val", DataFormat = global::ProtoBuf.DataFormat.FixedSize)]
    public float val
    {
      get { return _val?? default(float); }
      set { _val = value; }
    }
    //Here has been deleted XmlIgnore
    [global::System.ComponentModel.Browsable(false)]
    public bool valSpecified
    {
      get { return _val != null; }
      set { if (value == (_val== null)) _val = value ? val : (float?)null; }
    }
    private bool ShouldSerializeval() { return valSpecified; }
    private void Resetval() { valSpecified = false; }
    
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
    [global::ProtoBuf.ProtoContract(Name=@"EnumTest")]
    public enum EnumTest
    {
            
      [global::ProtoBuf.ProtoEnum(Name=@"ENUM_TEST_INVALID", Value=0)]
      ENUM_TEST_INVALID = 0,
            
      [global::ProtoBuf.ProtoEnum(Name=@"ENUM_TEST_A", Value=1)]
      ENUM_TEST_A = 1,
            
      [global::ProtoBuf.ProtoEnum(Name=@"ENUM_TEST_B", Value=2)]
      ENUM_TEST_B = 2
    }
  
}